pipeline {
    agent any
    tools {
        dockerTool 'Docker'
        jdk 'JDK 17'
        maven 'Maven'
    }
    environment {
//        NVD_API_KEY = 'your_nvd_api_key_here'
        DOCKERHUB_CREDENTIALS_ID = 'Docker-Hub' // The ID of your Docker Hub credentials in Jenkins
        DOCKERHUB_USERNAME = 'parthostutradhar' // Your Docker Hub username
        IMAGE_NAME = 'parthostutradhar/product-management' // The name of your Docker image, including the repository
        IMAGE_TAG = 'latest' // The tag for your Docker image
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'Github', url: 'https://github.com/zaxxio/product-management']])
            }
        }
        stage('Unit Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('OWSAP') {
            steps {
                echo 'OWSAP'
            }
        }
        stage('Build Image') {
                steps {
                    script {
                        // Build the Docker image
                        docker.build("${env.IMAGE_NAME}:${env.IMAGE_TAG}")
                }
            }
        }
//         stage('Build Run') {
//             steps {
//                 script {
//                     // Build and run Docker container
//                     dockerImage.run('-p 9090:9090 --name webapp')
//                 }
//             }
//         }
       stage('Push Image to Docker Hub') {
           steps {
               script {
                   // Log in to Docker Hub
                   docker.withRegistry('https://index.docker.io/v1/', env.DOCKERHUB_CREDENTIALS_ID) {
                       // Push the Docker image to Docker Hub
                       docker.image("${env.IMAGE_NAME}:${env.IMAGE_TAG}").push("${env.BUILD_NUMBER}")
                       docker.image("${env.IMAGE_NAME}:${env.IMAGE_TAG}").push("latest")
                   }
               }
           }
       }
       stage('Deploy to Kubernates') {
           steps {
               echo 'Kubernates'
           }
       }
    }
}